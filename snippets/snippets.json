{
  // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  "Print to console": {
    "prefix": "log",
    "body": [
      "console.log('$1');"
    ],
    "description": "Log output to console"
  },
  // plume2 - actor
  "actor": {
    "prefix": "actor",
    "body": [
      "import {Actor, Action, IMap} from 'plume2'",
      "",
      "export default class $1 extends Actor {",
      "  defaultState() {",
      "    return {$2}",
      "  }",
      "}"
    ]
  },
  "action": {
    "prefix": "action",
    "body": [
      "@Action('${1:name}')",
      "${2:actionName}(state: IMap) {",
      "  return state$0",
      "}"
    ]
  },
  //store
  "store": {
    "prefix": "store",
    "body": [
      "import {Store, IOptions} from 'plume2'",
      "",
      "export default class AppStore extends Store {",
      "  constructor(props: IOptions) {",
      "     super(props)",
      "     if(__DEV__) {",
      "       (window as any)._store = this",
      "     }",
      "  }",
      "  ",
      "  bindActor() {",
      "     return [$0]",
      "  }",
      "}"
    ]
  },
  //import ql 
  "iql": {
    "prefix": "iql",
    "body": [
      "import {QL} from 'plume2'"
    ]
  },
  //QL
  "ql": {
    "prefix": "ql",
    "body": [
      "const ${1:name} = QL('${1:name}', [",
      "  $2",
      "])"
    ]
  },
  //StoreProvider
  "StoreProvider": {
    "prefix": "spd",
    "body": [
      "import React from 'react'",
      "import {StoreProvider} from 'plume2'",
      "import AppStore from './store'",
      "",
      "@StoreProvider(AppStore)",
      "export default class $1 extends React.Component {",
      "  render() {",
      "    return (",
      "      $0",
      "    )",
      "  }",
      "}"
    ]
  },
  "relax": {
    "prefix": "relax",
    "body": [
      "import React from 'react'",
      "import {Relax} from 'plume2'",
      "",
      "@Relax",
      "export default class $1 extends React.Component {",
      "  props: {",
      "    relaxProps?: {",
      "     $0",
      "    }",
      "  };",
      "",
      "  static relaxProps = {",
      "    $2",
      "  };",
      "",
      "  render() {",
      "    return (",
      "      $3",
      "    )",
      "  }",
      "}"
    ]
  },
  "relaxProps": {
    "prefix": "rp",
    "body": [
      "const {$1} = this.props.relaxProps"
    ]
  },
  "PureComponent": {
    "prefix": "pure",
    "body": [
      "import React from 'react'",
      "",
      "export default class $1 extends React.PureComponent {",
      "  render() {",
      "   return (",
      "     $2",
      "   )",
      "  }",
      "}"
    ]
  },
  "Component": {
    "prefix": "cmp",
    "body": [
      "import React from 'react'",
      "",
      "export default class $1 extends React.Component {",
      "",
      "  render() {",
      "   return (",
      "     $2",
      "   )",
      "  }",
      "}"
    ]
  },
  //=================React life-cycle=========================
  "componentWillReceiceProps": {
    "prefix": "cwrp",
    "body": [
      "componentWillReceiveProps(nextProps: Object) {",
      "  $0",
      "}"
    ]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "  $0",
      "}"
    ]
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": [
      "componentWillMount() {",
      "  $0",
      "}"
    ]
  },
  "componentDidUpdate": {
    "prefix": "cdu",
    "body": [
      "componentDidUpdate() {",
      "  $0",
      "}"
    ]
  },
  "componentWillUpdate": {
    "prefix": "cwu",
    "body": [
      "componentWillUpdate() {",
      "  $0",
      "}"
    ]
  },
  "componentWillUnmout": {
    "prefix": "cwum",
    "body": [
      "componentWillUnmount() {",
      "  $0",
      "}"
    ]
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "  $0",
      "}"
    ]
  }
}